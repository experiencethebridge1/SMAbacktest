# -*- coding: utf-8 -*-
"""SMAanalysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_TZ10ZyaMP8vgN49pQ4aja-8Wo_wMPaG
"""

# Description: Dual moving average crossover to determine when to by and sell stock

# Import libraries
import pandas as pd
import numpy as np
from datetime import datetime
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

# Load the data
# https://finance.yahoo.com/quote/HDSN/history?period1=1575244800&period2=1606867200&interval=1d&filter=history&frequency=1d&includeAdjustedClose=true
# Download range and upload
from google.colab import files
uploaded = files.upload()

# Store the data
# Update the .csv as needed to match your file upload
Underlying = pd.read_csv('HDSN.csv')
# Show the data, "Underlying" is a place holder for what ever instrument being looked at
Underlying

# Visualize the data
plt.figure(figsize=(12.5,4.5))
plt.plot(Underlying['Adj Close'], label = 'S&P500')
plt.title('Underlyiing Adj Close Price History')
plt.xlabel('Dec 01, 2019 - Dec 01, 2020')
plt.ylabel('Adj Close Price USD ($)')
plt.legend(loc = 'upper left')
plt.show()

# Create the simple 9-day moving average
SMA9 = pd.DataFrame()
SMA9['Adj Close'] = Underlying['Adj Close'].rolling(window=9).mean()
SMA9

# Create a simple 50-day moving average
SMA50 = pd.DataFrame()
SMA50['Adj Close'] = Underlying['Adj Close'].rolling(window=50).mean()
SMA50

# Visualize the data
plt.figure(figsize=(12.5,6.5))
plt.plot(Underlying['Adj Close'], label = 'Underlying')
plt.plot(SMA9['Adj Close'], label = 'SMA9')
plt.plot(SMA50['Adj Close'], label = 'SMA50')
plt.title('Underlying Adj Close Price History')
plt.xlabel('Dec 01, 2019 - Dec 01, 2020')
plt.ylabel('Adj Close Price USD ($)')
plt.legend(loc = 'upper left')
plt.show()

# Create a new dataframe to combine everything
data = pd.DataFrame()
data['Underlying'] = Underlying['Adj Close']
data['SMA9'] = SMA9['Adj Close']
data['SMA50'] = SMA50['Adj Close']
data

# Create a function to signal when to buy or sell
def buy_sell(data):
  sigPriceBuy=[]
  sigPriceSell=[]
  flag = -1
  
  for i in range(len(data)):
    if data['SMA9'][i] > data['SMA50'][i]:
      if flag != 1:
        sigPriceBuy.append(data['Underlying'][i])
        sigPriceSell.append(np.nan)
        flag = 1
      else:
        sigPriceBuy.append(np.nan)
        sigPriceSell.append(np.nan)
    elif data['SMA9'][i] < data['SMA50'][i]:
      if flag !=0:
        sigPriceBuy.append(np.nan)
        sigPriceSell.append(data['Underlying'][i])
        flag = 0
      else:
        sigPriceBuy.append(np.nan)
        sigPriceSell.append(np.nan)
    else:
      sigPriceBuy.append(np.nan)
      sigPriceSell.append(np.nan)

  return(sigPriceBuy, sigPriceSell)

# Store the buy and sell data into a variable
buy_sell = buy_sell(data)
data['Buy_Signal_Price'] = buy_sell[0]
data['Sell_Signal_Price'] = buy_sell[1]

# Show the data
data

# Visualize the data and the strategy to buy or sell
plt.figure(figsize=(13.5,7.5))
plt.plot(data['Underlying'], label = 'Underlying', alpha = 0.45)
plt.plot(data['SMA9'], label = 'SMA9', alpha = 0.45)
plt.plot(data['SMA50'], label = 'SMA50', alpha = 0.45)
plt.scatter(data.index, data['Buy_Signal_Price'], label = 'Buy', marker= '^', color = 'green')
plt.scatter(data.index, data['Sell_Signal_Price'], label = 'Sell', marker= 'v', color = 'red')
plt.xlabel('Dec 01, 2019 - Dec 01, 2020')
plt.ylabel('Adj Close Price USD ($)')
plt.legend(loc = 'upper left')
plt.show()